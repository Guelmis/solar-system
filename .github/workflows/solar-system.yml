name: Solar System Workflow
on: 
    workflow_dispatch:
    push:
        branches:
            - main
            - 'feature/*'
env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }} 

jobs:
    unit-testing:
        name: Unit Testing
        
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            
            - name: Setup NodeJS Version - 18
              uses: actions/setup-node@v3
              with:
               node-version: 18

            - name: Composite Action - Cache & Install NPM Packages
              uses: ./.github/custom-actions/npm-action/
              with:
                path-of-folder: node_modules   

            # - name: Cache NPM dependencies
            #   uses: actions/cache@v3
            #   with:
            #     path: node_modules # Directory where the dependencies are generally added
            #     key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}   
            
            # - name: Install dependencies
            #   run: npm install
              
            - name: Unit testing
              run: npm test
              id: unit_testing

            - name: Archive Test Result
              if: failure() && steps.unit_testing.outcome == 'failure' || steps.unit_testing.outcome == 'success'
              uses: actions/upload-artifact@v3
              with:
                name: Mocha-Test-Result
                path: ./test-results.xml   

    code-coverage:
        name: Code Coverage
        runs-on: ubuntu-latest
        container:
            image: node:18    
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
                            
            # - name: Setup NodeJS Version - 18
            #   uses: actions/setup-node@v3
            #   with:
            #     node-version: 18
            - name: Composite Action - Cache & Install NPM Packages
              uses: ./.github/custom-actions/npm-action/
              with:
                path-of-folder: node_modules

            # - name: Cache NPM dependencies
            #   uses: actions/cache@v3
            #   with:
            #     path: node_modules # Directory where the dependencies are generally added
            #     key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }} 

            # - name: Install dependencies
            #   run: npm install
                              
            - name: Code Coverage
              continue-on-error: true
              run: npm run coverage
                
            - name: Archive Test Result
              uses: actions/upload-artifact@v3
              with:
                name: Code-Coverage-Result
                path: ./coverage
                retention-days: 5   

    # reports-s3:
        name: AWS S3 - Upload Reports
        needs: [code-coverage, unit-testing]
        runs-on: ubuntu-latest
        continue-on-error: true   
        steps:
            - name: Download Mocha Test Artifact 
              uses: actions/download-artifact@v3
              with:
                 name: Mocha-Test-Result
                
            - name: Download Code Coverage Artifact
              uses: actions/download-artifact@v3
              with:
                name: Code-Coverage-Result
                
            - name: Merge Test Files
              run: |
                ls -ltr
                mkdir reports-${{ github.sha }}
                mv cobertura-coverage.xml reports-${{ github.sha }}/
                mv test-results.xml reports-${{ github.sha }}/
                ls -ltr reports-${{ github.sha }}/

            - name: Upload to AWS S3
              uses: jakejarvis/s3-sync-action@master
              with:
                args: --follow-symlinks --delete
              env:
                AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                AWS_REGION: 'us-east-2'   
                SOURCE_DIR: 'reports-${{ github.sha }}'  
                DEST_DIR: 'reports-${{ github.sha }}'        



    # docker:
    #     name: Containerization
    #     needs: [code-coverage, unit-testing]
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: Checkout Repository
    #           uses: actions/checkout@v4
                            
    #         - name: DockerHub Logins
    #           uses: docker/login-action@v2.2.0
    #           with:
    #               username:  ${{  vars.DOCKER_USERNAME }}
    #               password:  ${{ secrets.DOCKER_PASSWORD }} 
            
    #         - name: Docker Build For Testing
    #           uses: docker/build-push-action@v4
    #           with:
    #             context: .
    #             push:  false
    #             tags:  ${{ vars.DOCKER_USERNAME }}/solar-system:${{  github.sha }}   
                
    #         - name: Docker Image Test
    #           run: |
    #            docker images
    #            docker run --name solar-sytem-app -d \
    #             -p 3000:3000 \
    #             -e MONGO_URI=$MONGO_URI \
    #             -e MONGO_USERNAME=$MONGO_USERNAMER \
    #             -e MONGO_PASSWORD=$MONGO_PASSWORD \
    #             ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
               
    #            export IP=$(docker inspect -f '{{ range .NetworkSettings.Networks }}{{ .IPAddress }}{{ end }}'  solar-system-app)
    #            echo $IP

    #            echo Testing Image URL using wget
    #            wget -q -O - 127.0.0.1:3000/live | grep live  

    #         - name: Docker Build For Testing
    #           uses: docker/build-push-action@v4
    #           with:
    #              context: .
    #              push:  true
    #              tags:  ${{ vars.DOCKER_USERNAME }}/solar-system:${{  github.sha }}     
                 
    # dev-deploy:
    #     if: contains(github.ref, 'feature/')
    #     needs: docker
    #     uses: ./.github/workflows/reuse-deployment.yml
    #     secrets: 
    #         k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
    #         mongodb-password: ${{ secrets.MONGO_PASSWORD }}
    #     with: 
    #         mongodb-uri: ${{  vars.MONGO_URI  }}
    #         environment: development
    #         k8s-manifest-dir: kubernetes/development/    

    #     name: Deployment to K8s dev Namespace
    #     environment: 
    #         name: development
    #         url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
    #     outputs:
    #        APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }} 
    #     runs-on: ubuntu-latest
    #     steps:

    #         - name: Checkout Repository
    #           uses: actions/checkout@v4

    #         - name: Install kubectl cli
    #           uses: azure/setup-kubectl@v3
    #           with:
    #             version: 1.26.0
            
    #         - name: Adding kubeconfig
    #           uses: azure/k8s-set-context:v3
    #           with:
    #             method: kubeconfig
    #             kubeconfig: ${{ secrets.KUBECONFIG }}  
            
            
    #         - name: Fetch K8s Cluster Details
    #           run: |
    #             kubectl version --short
    #             echo ----------------------------------------------
    #             kubectl get nodes
            
    #         - name: Get Nginx Controller IP as Github Env Variable
    #           run: |
    #               echo "INGRESS_IP=$(kubectl -n ingress-nginx get svc ingress-nginx-controller -o jsonpath="{.status.loadbalancer.ingress[0].ip}")" >> $GITHUB_ENV    
                
    #         - name:   Replace Token in Manifest files
    #           uses: cschleiden/replace-tokens@v1
    #           with:
    #               tokenPrefix: '_{_'  #D depends what you declare in your file as the Prefix and Suffix
    #               tokenSuffix: '_}_'
    #               files: '["kubernetes/development/*.yaml"]' # Location where the manifests are
    #           env:
    #             NAMESPACE: ${{ vars.NAMESPACE }}
    #             REPLICAS: ${{ vars.REPLICAS }}
    #             IMAGE: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
    #             INGRESS_IP:  ${{ env.INGRESS_IP }}          

    #         - name: Checking Variables replacement
    #           run: | 
    #             cat kubernetes/development/*.yaml    

    #         - name: Create MongoDB Secret
    #           run: |
    #              kubectl -n ${{ vars.NAMESPACE}} create secret generic mongo-db-creds \
    #               --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
    #               --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
    #               --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \    
    #               --save-config \
    #               --dry-run=client \
    #               -o yaml | kubectl apply -f -

    #         - name: Deploy to dev env
    #           run: |
    #             kubectl apply -f kubernetes/development

    #         - name: Set App Ingress Host URL
    #           id: set-ingress-host-address
    #           run: |
    #             echo "APP_INGRESS_HOST=$(kubectl -n${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")"  >> "$GITHUB_OUTPUT"    
    
    # dev-integration-test:
    #     name: Dev Integration Test
    #     if: contains(github.ref, 'feature/')
    #     needs: dev-deploy
    #     runs-on: ubuntu-latest
    #     steps:
            
    #         - name: Test URL Output using CURL and JQ
    #           env:
    #             URL: ${{ needs.dev-deploy.outputs.application-url }}
    #           run: |
    #              echo $URL
    #              echo "------------------------------------------------------"
    #              curl https://$URL/live -s -k | jq -r .status | grep -i live 
    #              # The -k ignores the certificate

    # prod-deploy:

    #     name: Deployment to K8s prod Namespace
    #     if: github.ref == 'refs/heads/main'
    #     needs: docker
    #     uses: ./.github/workflows/reuse-deployment.yml
    #     secrets: 
    #         k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
    #         mongodb-password: ${{ secrets.MONGO_PASSWORD }}
    #     with: 
    #         mongodb-uri: ${{  vars.MONGO_URI  }}
    #         environment: development
    #         k8s-manifest-dir: kubernetes/development/            
    #     environment: 
    #         name: production
    #         url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
    #     outputs:
    #        APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }} 
    #     runs-on: ubuntu-latest
    #     steps:

    #         - name: Checkout Repository
    #           uses: actions/checkout@v4

    #         - name: Install kubectl cli
    #           uses: azure/setup-kubectl@v3
    #           with:
    #             version: 1.26.0
            
    #         - name: Adding kubeconfig
    #           uses: azure/k8s-set-context:v3
    #           with:
    #             method: kubeconfig
    #             kubeconfig: ${{ secrets.KUBECONFIG }}  
            
            
    #         - name: Fetch K8s Cluster Details
    #           run: |
    #             kubectl version --short
    #             echo ----------------------------------------------
    #             kubectl get nodes
            
    #         - name: Get Nginx Controller IP as Github Env Variable
    #           run: |
    #               echo "INGRESS_IP=$(kubectl -n ingress-nginx get svc ingress-nginx-controller -o jsonpath="{.status.loadbalancer.ingress[0].ip}")" >> $GITHUB_ENV    
                
    #         - name:   Replace Token in Manifest files
    #           uses: cschleiden/replace-tokens@v1
    #           with:
    #               tokenPrefix: '_{_'  #D depends what you declare in your file as the Prefix and Suffix
    #               tokenSuffix: '_}_'
    #               files: '["kubernetes/production/*.yaml"]' # Location where the manifests are
    #           env:
    #             NAMESPACE: ${{ vars.NAMESPACE }}
    #             REPLICAS: ${{ vars.REPLICAS }}
    #             IMAGE: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
    #             INGRESS_IP:  ${{ env.INGRESS_IP }}          

    #         - name: Checking Variables replacement
    #           run: | 
    #             cat kubernetes/production/*.yaml    

    #         - name: Create MongoDB Secret
    #           run: |
    #              kubectl -n ${{ vars.NAMESPACE}} create secret generic mongo-db-creds \
    #               --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
    #               --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
    #               --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \    
    #               --save-config \
    #               --dry-run=client \
    #               -o yaml | kubectl apply -f -

    #         - name: Deploy to PROD env
    #           run: |
    #             kubectl apply -f kubernetes/production

    #         - name: Set App Ingress Host URL
    #           id: set-ingress-host-address
    #           run: |
    #             echo "APP_INGRESS_HOST=$(kubectl -n${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")"  >> "$GITHUB_OUTPUT"                    
                
    # prod-integration-test:
    #         name: Prod Integration Test
    #         if: github.ref == 'refs/heads/main'
    #         needs: prod-deploy
    #         runs-on: ubuntu-latest
    #         steps:
                        
    #           - name: Test URL Output using CURL and JQ
    #             env:
    #                 URL: ${{ needs.prod-deploy.outputs.application-uri }}
    #             run: |
    #                   echo $URL
    #                   echo "------------------------------------------------------"
    #                   curl https://$URL/live -s -k | jq -r .status | grep -i live 
    #                   # The -k ignores the certificate
                 
           
                 

                    

              



